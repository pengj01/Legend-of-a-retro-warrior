

import pygame
import os
import math
import random
import time
bed_img = pygame.image.load("bed.png").convert_alpha


# Initialize Pygame
pygame.init()
doornumbe = 0
def render_room_number(room_number):
    font = pygame.font.SysFont(None, 30)
    text = font.render("Room: " + str(room_number), True, (255, 255, 255))
    screen.blit(text, (200, 200))  # Adjust position as needed
# Set screen dimensions
SCREEN_WIDTH, SCREEN_HEIGHT =900, 750
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Legend of a retro warrior impossible mode")
bed_img_original = pygame.image.load("bed.png").convert_alpha()
# Resize bed image
bed_img = pygame.transform.scale(bed_img_original, (200, 100))
# Load player images
player_up_img = pygame.image.load("playerupdefalt.jpg").convert_alpha()
player_down_img = pygame.image.load("playerdowndefalt.png").convert_alpha()
player_left_img = pygame.image.load("playerleftdefalt.png").convert_alpha()
player_right_img = pygame.image.load("playerightdefalt.png").convert_alpha()

# Load sword images
wooden_sword_img = pygame.image.load("woodensword.png").convert_alpha()
katana_img = pygame.image.load("katana.png").convert_alpha()

# Load blue cube image
blue_cube_img = pygame.Surface((30, 30))
blue_cube_img.fill((0, 0, 255))

# Load green cube image
green_cube_img = pygame.Surface((30, 30))
green_cube_img.fill((0, 255, 0))

# Load red cube image
red_cube_img = pygame.Surface((30, 30))
red_cube_img.fill((255, 0, 0))

# Load purple cube image
purple_cube_img = pygame.Surface((30, 30))
purple_cube_img.fill((128, 0, 128))

# Load font for displaying sword names
font = pygame.font.SysFont(None, 20)

# Define function to display sword names
def display_sword_names():
    wooden_text = font.render("Wooden Sword", True, (255, 255, 255))
    katana_text = font.render("Katana", True, (255, 255, 255))
    if player.equipped_sword == 'wooden':
        screen.blit(wooden_text, (player.sword_rect.right + 5, player.sword_rect.centery - wooden_text.get_height() // 2))
    elif player.equipped_sword == 'katana':
        screen.blit(katana_text, (player.sword_rect.right + 5, player.sword_rect.centery - katana_text.get_height() // 2))

def show_death_screen():
    # Fill the screen with a dark background color
    screen.fill((0, 0, 0))
    # Display death message
    font = pygame.font.SysFont(None, 50)
    text = font.render("You died!", True, (255, 0, 0))
    text_rect = text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))
    screen.blit(text, text_rect)
    text = font.render("Score: "+str(doorcount), True, (255, 0, 0))
    text_rect = text.get_rect(center=(SCREEN_WIDTH // 2, (SCREEN_HEIGHT // 2) +text.get_height()))
    screen.blit(text, text_rect)
    # Update the display
    pygame.display.flip()

# Create player class
class Player(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = player_down_img  # default image
        self.rect = self.image.get_rect(center=(x, y))
        self.speed = 5.5
        self.last_attack_time = pygame.time.get_ticks()
        self.attack_cooldown = 1000  # milliseconds
        self.equipped_sword = "wooden"  # Default equipped sword
        self.wooden_sword_img = wooden_sword_img
        self.katana_img = katana_img
        self.sword_rect = self.wooden_sword_img.get_rect(topright=(SCREEN_WIDTH, 0))  # Initialize sword rect

    def update(self):
        if self.equipped_sword == "wooden":
            self.image = self.wooden_sword_img
        elif self.equipped_sword == "katana":
            self.image = self.katana_img
        # Update sword position
        self.sword_rect.topright = (SCREEN_WIDTH, 0)

    def move(self, keys):
        if keys[pygame.K_w] and self.rect.top > 0:
            self.image = player_up_img
            self.rect.y -= self.speed
        elif keys[pygame.K_s] and self.rect.bottom < SCREEN_HEIGHT:
            self.image = player_down_img
            self.rect.y += self.speed
        elif keys[pygame.K_a] and self.rect.left > 0:
            self.image = player_left_img
            self.rect.x -= self.speed
        elif keys[pygame.K_d] and self.rect.right < SCREEN_WIDTH:
            self.image = player_right_img
            self.rect.x += self.speed

    def handle_attack(self):
        current_time = pygame.time.get_ticks()
        if pygame.key.get_pressed()[pygame.K_SPACE] and current_time - self.last_attack_time > self.attack_cooldown:
            self.attack()
            self.last_attack_time = current_time
        elif pygame.key.get_pressed()[pygame.K_1]:
            self.equipped_sword = "wooden"
            self.attack_cooldown = 1000  # milliseconds
        elif pygame.key.get_pressed()[pygame.K_2]:
            self.equipped_sword = "katana"
            self.attack_cooldown = 350  # milliseconds

    def attack(self):
        if self.equipped_sword == "wooden":
            attack = Attack(self.rect.centerx, self.rect.centery, self.image)
        elif self.equipped_sword == "katana":
            attack = KatanaAttack(self.rect.centerx, self.rect.centery, self.image)
        all_sprites.add(attack)
        attacks.add(attack)

# Create attack class
class Attack(pygame.sprite.Sprite):
    def __init__(self, x, y, player_image):
        super().__init__()
        self.image = self.create_arc_image(player_image)
        self.rect = self.image.get_rect(center=(x, y))
        self.speed = 10
        self.distance_traveled = 0

    def update(self):
        self.rect.x += self.speed * math.cos(self.angle)
        self.rect.y += self.speed * math.sin(self.angle)
        self.distance_traveled += self.speed
        if self.distance_traveled >= 120:
            self.kill()

    def create_arc_image(self, player_image):
        attack_surface = pygame.Surface((100, 100), pygame.SRCALPHA)
        # Create an arc shape using pygame.draw.arc
        if player_image == player_up_img:
            pygame.draw.arc(attack_surface, (255, 0, 0), (0, 0, 100, 100), 0, math.pi, 5)
            self.angle = -math.pi / 2
        elif player_image == player_down_img:
            pygame.draw.arc(attack_surface, (255, 0, 0), (0, 0, 100, 100), math.pi, 0, 5)
            self.angle = math.pi / 2  # Corrected angle here
        elif player_image == player_left_img:
            pygame.draw.arc(attack_surface, (255, 0, 0), (0, 0, 100, 100), math.pi / 2, -math.pi / 2, 5)
            self.angle = math.pi
        elif player_image == player_right_img:
            pygame.draw.arc(attack_surface, (255, 0, 0), (0, 0, 100, 100), -math.pi / 2, math.pi / 2, 5)
            self.angle = 0
        return attack_surface

# Create KatanaAttack class
class KatanaAttack(Attack):
    def __init__(self, x, y, player_image):
        super().__init__(x, y, player_image)
        self.speed = 20
        self.distance_traveled = 0
        self.attack_cooldown = 300  # milliseconds

# Create cube class (base class for blue, green, red, and purple cubes)
# Create cube class (base class for blue, green, red, and purple cubes)
class Cube(pygame.sprite.Sprite):
    def __init__(self, image, x, y):
        super().__init__()
        self.image = image
        self.rect = self.image.get_rect(center=(x, y))
        self.speed = 3

    def update(self, player_pos):
        # Move towards the player
        dx = player_pos[0] - self.rect.x
        dy = player_pos[1] - self.rect.y
        dist = max(1, abs(dx) + abs(dy))
        dx = dx / dist
        dy = dy / dist
        self.rect.x += dx * self.speed
        self.rect.y += dy * self.speed


# Create blue cube class
class BlueCube(Cube):
    def __init__(self, x, y):
        super().__init__(blue_cube_img, x, y)

# Create green cube class
class GreenCube(Cube):
    def __init__(self, x, y):
        super().__init__(green_cube_img, x, y)
        self.max_health = 50
        self.health = self.max_health
        self.health_bar_length = 30
        self.health_ratio = self.health / self.max_health
        self.speed=3.5
    def draw_health_bar(self):
        # Calculate width of health bar
        self.health_ratio = self.health / self.max_health
        bar_width = int(self.health_ratio * self.health_bar_length)
        # Determine color based on health
        if self.health_ratio > 0.5:
            health_color = (0, 255, 0)  # Green
        else:
            health_color = (255, 0, 0)  # Red
        # Draw health bar
        pygame.draw.rect(screen, health_color, (self.rect.x - 15, self.rect.y - 20, bar_width, 5))

# Create red cube class
class RedCube(Cube):
    def __init__(self, x, y):
        super().__init__(red_cube_img, x, y)
        self.max_health = 160
        self.health = self.max_health
        self.health_bar_length = 30
        self.health_ratio = self.health / self.max_health
        self.speed=3.5
    def draw_health_bar(self):
        # Calculate width of health bar
        self.health_ratio = self.health / self.max_health
        bar_width = int(self.health_ratio * self.health_bar_length)
        # Determine color based on health
        if self.health_ratio > 0.6:
            health_color = (0, 255, 0)  # Green
        elif self.health_ratio > 0.3:
            health_color = (255, 255, 0)  # Yellow
        elif self.health_ratio > 0.1:
            health_color = (255, 165, 0)  # Orange
        else:
            health_color = (255, 0, 0)  # Red
        # Draw health bar
        pygame.draw.rect(screen, health_color, (self.rect.x - 15, self.rect.y - 20, bar_width, 5))

# Create purple cube class
class PurpleCube(Cube):
    def __init__(self, x, y):
        super().__init__(purple_cube_img, x, y)
        self.max_health = 60
        self.health = self.max_health
        self.health_bar_length = 30
        self.health_ratio = self.health / self.max_health
        self.speed=4.25
    def draw_health_bar(self):
        # Calculate width of health bar
        self.health_ratio = self.health / self.max_health
        bar_width = int(self.health_ratio * self.health_bar_length)
        # Determine color based on health
        if self.health_ratio > 0.6:
            health_color = (0, 255, 0)  # Green
        elif self.health_ratio > 0.3:
            health_color = (255, 255, 0)  # Yellow
        elif self.health_ratio > 0.1:
            health_color = (255, 165, 0)  # Orange
        else:
            health_color = (255, 0, 0)  # Red
        # Draw health bar
        pygame.draw.rect(screen, health_color, (self.rect.x - 15, self.rect.y - 20, bar_width, 5))

# Create yellow door class
class YellowDoor(pygame.sprite.Sprite):
    def __init__(self, side):
        super().__init__()
        self.side = side
        if side in ["top", "bottom"]:
            self.image = pygame.Surface((10, SCREEN_HEIGHT // 4))  # Smaller door width
            if side == "top":
                self.rect = self.image.get_rect(topleft=(0, SCREEN_HEIGHT // 4))
            else:
                self.rect = self.image.get_rect(topright=(SCREEN_WIDTH, SCREEN_HEIGHT // 4))
        elif side in ["left", "right"]:
            self.image = pygame.Surface((SCREEN_WIDTH // 4, 10))  # Smaller door height
            if side == "left":
                self.rect = self.image.get_rect(topleft=(SCREEN_WIDTH // 4, 0))
            else:
                self.rect = self.image.get_rect(bottomleft=(SCREEN_WIDTH // 4, SCREEN_HEIGHT))

        self.image.fill((255, 255, 0))  # Yellow color
        self.opened = False
doorcount=0
# Create player object
player = Player(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)
all_sprites = pygame.sprite.Group(player)
attacks = pygame.sprite.Group()
cubes = pygame.sprite.Group()  # Group for cubes

# Randomly choose a side for the yellow door
side = random.choice(["top", "bottom", "left", "right"])
door = YellowDoor(side)
all_sprites.add(door)

# Spawn initial blue cubes
initial_enemy_count = random.randint(2, 3)
# Main loop
running = True
clock = pygame.time.Clock()
instructions_displayed = True
door_instructions_displayed = False
while running:
    # Set background color
    screen.fill((50, 50, 50))  # Dark gray
    
    if instructions_displayed:
        font = pygame.font.SysFont(None, 30)
        text = font.render("Use WASD to move and Space to attack", True, (255, 255, 255))
        screen.blit(text, (SCREEN_WIDTH // 2 - text.get_width() // 2, SCREEN_HEIGHT // 2 - text.get_height() * 2))
        text1 = font.render("Press 'E' to open the door", True, (255, 255, 255))
        screen.blit(text1, (SCREEN_WIDTH // 2 - text1.get_width() // 2, SCREEN_HEIGHT // 2 - text1.get_height()))
        text1 = font.render("Press 1 or 2 to equip a different sword", True, (255, 255, 255))
        screen.blit(text1, (SCREEN_WIDTH // 2 - text1.get_width() // 2, SCREEN_HEIGHT // 2))
    keys = pygame.key.get_pressed()
    player.move(keys)  # Handle player movement
    player.handle_attack()  # Handle player attack

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Check for collisions between attacks and cubes
    for attack in attacks:
        # Check if attack collides with any cube
        hit_cubes = pygame.sprite.spritecollide(attack, cubes, False)  # Change to False to keep cubes in group
        for cube in hit_cubes:
            if isinstance(cube, BlueCube):  # Check if the cube is a BlueCube
                cube.kill()  # Delete the blue cube
            elif isinstance(cube, GreenCube) or isinstance(cube, RedCube) or isinstance(cube, PurpleCube):  # Check if the cube is a GreenCube
                if player.equipped_sword == "wooden":
                    cube.health -= 1  # Decrease the health of the cube by 1
                if player.equipped_sword == "katana":
                    cube.health -= 10
                if cube.health <= 0:
                    cube.kill()  # Delete the cube if health drops to or below 0

    # Update cubes
    for cube in cubes:
        cube.update(player.rect.center)
        if isinstance(cube, GreenCube) or isinstance(cube, RedCube) or isinstance(cube, PurpleCube):
            cube.draw_health_bar()  # Draw health bar for green, red, and purple cubes

    # Check if all cubes are destroyed
    if len(cubes) == 0:
        # Check if the door is closed
        if not door.opened:
            # Display door instructions only when touching the door
            if pygame.sprite.collide_rect(player, door) and not door_instructions_displayed:
                pygame.display.flip()
                door_instructions_displayed = True

            # Check if player presses 'E' to open the door
            if keys[pygame.K_e]:
                door.opened = True
                instructions_displayed = False
                
    # Check if the player touches the door
    if door.opened and pygame.sprite.collide_rect(player, door):
        # Reset game
        doorcount += 1
        all_sprites.empty()
        all_sprites.add(player)  # Add player back to sprite group
        player.rect.center = (SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)
        # Randomly choose a side for the yellow door
        if doorcount != 10:  
            side = random.choice(["top", "bottom", "left", "right"])
            door = YellowDoor(side)
        else:
            door=YellowDoor("right")
        all_sprites.add(door)
        # Respawn initial blue cubes
        if doorcount !=10:
            for _ in range(initial_enemy_count + doorcount*7):
                x = random.randint(0, SCREEN_WIDTH)
                y = random.randint(0, SCREEN_HEIGHT)
                distance = ((x - player.rect.centerx) ** 2 + (y - player.rect.centery) ** 2) ** 0.5
                if distance > 200:
                    blue_cube = BlueCube(x, y)
                    cubes.add(blue_cube)
                    all_sprites.add(blue_cube)
            # Add red cube occasionally
            if random.randint(0, 0) == 0 and doorcount>1:  # Adjust probability as needed
                x = random.randint(0, SCREEN_WIDTH)
                y = random.randint(0, SCREEN_HEIGHT)
                distance = ((x - player.rect.centerx) ** 2 + (y - player.rect.centery) ** 2) ** 0.5
                if distance > 200:
                    green_cube = GreenCube(x, y)
                    cubes.add(green_cube)
                    all_sprites.add(green_cube)
            if random.randint(0, 0) == 0 and doorcount>1:  # Adjust probability as needed
                x = random.randint(0, SCREEN_WIDTH)
                y = random.randint(0, SCREEN_HEIGHT)
                distance = ((x - player.rect.centerx) ** 2 + (y - player.rect.centery) ** 2) ** 0.5
                if distance > 200:
                    red_cube = RedCube(x, y)
                    cubes.add(red_cube)
                    all_sprites.add(red_cube)
            if random.randint(0, 0) == 0 and doorcount>1:  # Adjust probability as needed
                x = random.randint(0, SCREEN_WIDTH)
                y = random.randint(0, SCREEN_HEIGHT)
                distance = ((x - player.rect.centerx) ** 2 + (y - player.rect.centery) ** 2) ** 0.5
                if distance > 200:
                    purple_cube = PurpleCube(x, y)
                    cubes.add(purple_cube)
                    all_sprites.add(purple_cube)
    if doorcount == 10:
        # Blit the bed image onto the screen
        screen.blit( bed_img , (100, 200)) 
        screen.blit( bed_img , (400, 400)) 
        screen.blit( bed_img , (100, 400)) 
        screen.blit( bed_img , (400, 200)) 
        text1 = font.render("Rest and reconver.... prepair yourself ", True, (155, 0, 0))
        screen.blit(text1, (SCREEN_WIDTH // 2 - text1.get_width() // 2, SCREEN_HEIGHT // 2))
    for attack in attacks:
        attack.update()
        # Check if the door is closed
        if not door.opened:
            # Display door instructions only when touching the door
            if pygame.sprite.collide_rect(player, door) and not door_instructions_displayed:
                pygame.display.flip()
                door_instructions_displayed = True

            # Check if player presses 'E' to open the door
            if keys[pygame.K_e]:
                door.opened = True
                instructions_displayed = False

    # Draw all sprites
    all_sprites.draw(screen)
    if player.equipped_sword == 'wooden':
        screen.blit(wooden_sword_img, player.sword_rect)
    if player.equipped_sword == 'katana':
        screen.blit(katana_img, player.sword_rect)
    # Display sword names
    display_sword_names()
    if pygame.sprite.spritecollide(player, cubes, True):
        show_death_screen()
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
    # Update display
    pygame.display.flip()
    clock.tick(60)
    render_room_number(doorcount)  # Render room number

pygame.quit()

